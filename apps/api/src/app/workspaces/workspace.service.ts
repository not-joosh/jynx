import { Injectable, NotFoundException, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { BackendSupabaseService } from '../supabase/supabase.service';
import { WorkspaceDto, WorkspaceSwitchResponseDto, OrganizationMemberDto } from '@challenge/data/backend';

@Injectable()
export class WorkspaceService {
  constructor(private supabaseService: BackendSupabaseService) {}

  /**
   * Get all workspaces (organizations) for a user
   */
  async getUserWorkspaces(userId: string): Promise<WorkspaceDto[]> {
    try {
      const { data: memberships, error: membershipsError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select(`
          organization_id,
          role,
          joined_at,
          organizations!inner (
            id,
            name,
            description,
            owner_id
          )
        `)
        .eq('user_id', userId)
        .order('joined_at', { ascending: false });

      if (membershipsError) {
        console.error('❌ Failed to get user workspaces:', membershipsError);
        throw new BadRequestException('Failed to get user workspaces');
      }

      // Get current organization for user
      const { data: user } = await this.supabaseService.getUserProfile(userId);
      const currentOrganizationId = user?.current_organization_id;

      // Get member counts for each organization
      const workspaces: WorkspaceDto[] = [];
      
      for (const membership of memberships) {
        const { data: memberCount } = await this.supabaseService.getClient()
          .from('organization_members')
          .select('id', { count: 'exact' })
          .eq('organization_id', membership.organization_id);

        // Handle Supabase response structure - organizations is an array
        const organization = Array.isArray(membership.organizations) 
          ? membership.organizations[0] 
          : membership.organizations;

        workspaces.push({
          id: (organization as any).id,
          name: (organization as any).name,
          description: (organization as any).description,
          role: membership.role,
          memberCount: memberCount?.length || 0,
          isCurrent: membership.organization_id === currentOrganizationId,
          joinedAt: new Date(membership.joined_at),
          organization: {
            id: (organization as any).id,
            name: (organization as any).name,
            description: (organization as any).description,
            ownerId: (organization as any).owner_id,
          },
        });
      }

      return workspaces;
    } catch (error) {
      if (error instanceof BadRequestException) {
        throw error;
      }
      console.error('❌ Get user workspaces failed:', error);
      throw new BadRequestException('Failed to get user workspaces');
    }
  }

  /**
   * Switch user's current workspace
   */
  async switchWorkspace(userId: string, organizationId: string): Promise<WorkspaceSwitchResponseDto> {
    try {
      // Check if user is a member of the organization
      const { data: membership, error: membershipError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', userId)
        .eq('organization_id', organizationId)
        .single();

      if (membershipError || !membership) {
        throw new UnauthorizedException('You are not a member of this organization');
      }

      // Update user's current organization
      const { error: updateError } = await this.supabaseService.getClient()
        .from('users')
        .update({ current_organization_id: organizationId })
        .eq('id', userId);

      if (updateError) {
        console.error('❌ Failed to switch workspace:', updateError);
        throw new BadRequestException('Failed to switch workspace');
      }

      // Get updated workspace info
      const workspaces = await this.getUserWorkspaces(userId);
      const newWorkspace = workspaces.find(w => w.id === organizationId);

      if (!newWorkspace) {
        throw new NotFoundException('Workspace not found');
      }

      console.log('✅ Workspace switched successfully');

      return {
        workspace: newWorkspace,
        accessToken: 'jwt-token-here', // This will be generated by JwtService
        message: `Switched to ${newWorkspace.name}`,
      };
    } catch (error) {
      if (error instanceof UnauthorizedException || error instanceof NotFoundException || error instanceof BadRequestException) {
        throw error;
      }
      console.error('❌ Switch workspace failed:', error);
      throw new BadRequestException('Failed to switch workspace');
    }
  }

  /**
   * Get organization members
   */
  async getOrganizationMembers(organizationId: string, userId: string): Promise<OrganizationMemberDto[]> {
    try {
      // Check if user is a member of the organization
      const { data: membership, error: membershipError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', userId)
        .eq('organization_id', organizationId)
        .single();

      if (membershipError || !membership) {
        throw new UnauthorizedException('You are not a member of this organization');
      }

      // Get all members of the organization
      const { data: members, error: membersError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select(`
          id,
          user_id,
          organization_id,
          role,
          joined_at,
          joined_via,
          invited_by,
          invitation_id,
          users!inner (
            id,
            email,
            first_name,
            last_name
          ),
          inviter:users!invited_by (
            id,
            first_name,
            last_name,
            email
          )
        `)
        .eq('organization_id', organizationId)
        .order('joined_at', { ascending: false });

      if (membersError) {
        console.error('❌ Failed to get organization members:', membersError);
        throw new BadRequestException('Failed to get organization members');
      }

      return members.map(member => {
        // Handle Supabase response structure - users and inviter are arrays
        const user = Array.isArray(member.users) ? member.users[0] : member.users;
        const inviter = member.inviter && Array.isArray(member.inviter) ? member.inviter[0] : member.inviter;

        return {
          id: member.id,
          userId: member.user_id,
          organizationId: member.organization_id,
          role: member.role,
          joinedAt: new Date(member.joined_at),
          joinedVia: member.joined_via,
          user: {
            id: (user as any).id,
            email: (user as any).email,
            firstName: (user as any).first_name,
            lastName: (user as any).last_name,
          },
          invitedBy: inviter ? {
            id: (inviter as any).id,
            firstName: (inviter as any).first_name,
            lastName: (inviter as any).last_name,
            email: (inviter as any).email,
          } : undefined,
        };
      });
    } catch (error) {
      if (error instanceof UnauthorizedException || error instanceof BadRequestException) {
        throw error;
      }
      console.error('❌ Get organization members failed:', error);
      throw new BadRequestException('Failed to get organization members');
    }
  }

  /**
   * Remove a member from organization
   */
  async removeMember(organizationId: string, memberUserId: string, requesterId: string): Promise<void> {
    try {
      // Check if requester has permission to remove members
      const { data: requesterMembership, error: requesterError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', requesterId)
        .eq('organization_id', organizationId)
        .single();

      if (requesterError || !requesterMembership) {
        throw new UnauthorizedException('You are not a member of this organization');
      }

      // Check if requester is owner or admin
      if (!['owner', 'admin'].includes(requesterMembership.role)) {
        throw new UnauthorizedException('Only owners and admins can remove members');
      }

      // Check if trying to remove owner
      const { data: memberMembership, error: memberError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', memberUserId)
        .eq('organization_id', organizationId)
        .single();

      if (memberError || !memberMembership) {
        throw new NotFoundException('Member not found');
      }

      if (memberMembership.role === 'owner') {
        throw new BadRequestException('Cannot remove organization owner');
      }

      // Check if admin is trying to remove another admin (only owner can do this)
      if (requesterMembership.role === 'admin' && memberMembership.role === 'admin') {
        throw new UnauthorizedException('Only owners can remove other admins');
      }

      // Remove member
      const { error: removeError } = await this.supabaseService.getClient()
        .from('organization_members')
        .delete()
        .eq('user_id', memberUserId)
        .eq('organization_id', organizationId);

      if (removeError) {
        console.error('❌ Failed to remove member:', removeError);
        throw new BadRequestException('Failed to remove member');
      }

      // If removed user was the current user, update their current organization
      if (memberUserId === requesterId) {
        const { error: updateError } = await this.supabaseService.getClient()
          .from('users')
          .update({ current_organization_id: null })
          .eq('id', memberUserId);

        if (updateError) {
          console.error('❌ Failed to update user current organization:', updateError);
        }
      }

      console.log('✅ Member removed successfully');
    } catch (error) {
      if (error instanceof UnauthorizedException || error instanceof NotFoundException || error instanceof BadRequestException) {
        throw error;
      }
      console.error('❌ Remove member failed:', error);
      throw new BadRequestException('Failed to remove member');
    }
  }

  /**
   * Update member role
   */
  async updateMemberRole(
    organizationId: string,
    memberUserId: string,
    newRole: string,
    requesterId: string
  ): Promise<void> {
    try {
      // Check if requester has permission to update roles
      const { data: requesterMembership, error: requesterError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', requesterId)
        .eq('organization_id', organizationId)
        .single();

      if (requesterError || !requesterMembership) {
        throw new UnauthorizedException('You are not a member of this organization');
      }

      // Only owners can update roles
      if (requesterMembership.role !== 'owner') {
        throw new UnauthorizedException('Only owners can update member roles');
      }

      // Check if trying to update owner role
      const { data: memberMembership, error: memberError } = await this.supabaseService.getClient()
        .from('organization_members')
        .select('role')
        .eq('user_id', memberUserId)
        .eq('organization_id', organizationId)
        .single();

      if (memberError || !memberMembership) {
        throw new NotFoundException('Member not found');
      }

      if (memberMembership.role === 'owner') {
        throw new BadRequestException('Cannot change owner role');
      }

      // Update member role
      const { error: updateError } = await this.supabaseService.getClient()
        .from('organization_members')
        .update({ role: newRole })
        .eq('user_id', memberUserId)
        .eq('organization_id', organizationId);

      if (updateError) {
        console.error('❌ Failed to update member role:', updateError);
        throw new BadRequestException('Failed to update member role');
      }

      console.log('✅ Member role updated successfully');
    } catch (error) {
      if (error instanceof UnauthorizedException || error instanceof NotFoundException || error instanceof BadRequestException) {
        throw error;
      }
      console.error('❌ Update member role failed:', error);
      throw new BadRequestException('Failed to update member role');
    }
  }
}
